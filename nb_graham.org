Author:  Joe Graham
E-mail:  joe.w.graham@gmail.com
Project: Embedded Ensemble Encoding (EEE) Theory
Drive:   https://drive.google.com/drive/folders/0Bx7OIVIgY3AVU2pKQ21EdFVPVDA

* 2019-01-10 -- Cleaning up and organizing

In progress
-----------
Uninstall Anaconda
Reinstall Anaconda (Python 2 and 3)
Uninstall NEURON
Install latest NEURON
Install Visual Studio Code
Run Sergio's EEE network sim
Summarize current network model
Prepare for discussion with EEE team
Meeting 10am Eastern to discuss network

** Anaconda

*** Uninstalling 

https://docs.anaconda.com/anaconda/install/uninstall/

anaconda-clean doesn't install properly:

	graham-mac% conda install anaconda-clean
	Fatal Python error: initfsencoding: unable to load the file system codec
	  File "/Users/graham/anaconda/lib/python2.7/encodings/__init__.py", line 123
	    raise CodecRegistryError,\
	                            ^
	SyntaxError: invalid syntax

	Current thread 0x0000000111f705c0 (most recent call first):
	Abort
	Fatal Python error: initfsencoding: unable to load the file system codec
	  File "/Users/graham/anaconda/lib/python2.7/encodings/__init__.py", line 123
	    raise CodecRegistryError,\
	                            ^
	SyntaxError: invalid syntax

	Current thread 0x0000000107f365c0 (most recent call first):
	Abort
	graham-mac% 

Seems like it may already be installed.  Just going to run it:

	graham-mac% anaconda-clean
	Delete .anaconda? (Y or N): y
	Delete .bash_profile? (Y or N): n
	Delete .bash_profile-anaconda.bak? (Y or N): n
	Delete .cache? (Y or N): n
	Delete .conda? (Y or N): y
	Delete .condarc? (Y or N): y
	Delete .config? (Y or N): n
	Delete .continuum? (Y or N): y
	Delete .ipynb_checkpoints? (Y or N): y
	Delete .ipython? (Y or N): y
	Delete .jupyter? (Y or N): y
	Delete .matplotlib? (Y or N): y
	graham-mac% 

Now to delete old anaconda dirs:

	/anaconda3
	/Users/graham/anaconda

*** Reinstalling Anaconda

**** To install Python 2 and 3:

http://docs.anaconda.com/anaconda/install/mac-os/#macos-graphical-install
https://conda.io/docs/user-guide/tasks/manage-python.html

Installing Anaconda3, comes with Visual Studio

Having a problem with: "conda search python" and "ipython". 
Switching Terminal to Bash.  Now it works fine.

So far I only have Python 3 installed.  Will try to run network sims in 
Python 3 before bothering with installing 2.7

*** To use Python 2 and 3:

https://docs.anaconda.com/anaconda/user-guide/tasks/switch-environment/

Going to try with just Python 3 for now.

** NEURON

Uninstalling and reinstalling NEURON.

Moving /Applications/NEURON-7.5 to the Desktop (will delete once everything
is working

Getting latest copy of NEURON
https://www.neuron.yale.edu/neuron/download

Running gui installer.  Seems to have worked: can run programs from Finder,
but not from command line.

Looking at path:
	graham$ echo $PATH
	/Users/graham/anaconda3/bin:/usr/site/nrniv/local/python/anaconda3/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/anaconda3/bin:/Library/Frameworks/Python.framework/Versions/3.6/bin:/Users/graham/anaconda/bin:/Applications/NEURON-7.4/nrn/x86_64/bin://anaconda/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin:/opt/X11/bin

Okay, my new NEURON is in NEURON-7.6, not NEURON-7.4
Need to update my PATH

https://hathaway.cc/2008/06/how-to-edit-your-path-environment-variables-on-mac/

Editing .bash_profile, changing all 7.4 to 7.6

Now NEURON commands run from command line.


** EEE Network Sims

*** Updating repo:
https://github.com/Neurosim-lab/EEE_network

	graham$ git clone https://github.com/Neurosim-lab/EEE_network.git
	graham$ cd EEE_network/mod/
	graham$ nrnivmodl

Looks good except for ghk.inc:

	Translating NMDAeee.mod into NMDAeee.c
	"/Applications/NEURON-7.6/nrn/x86_64/bin/nocmodl" PlateauConductance
	Couldn't open: ghk.inc
	Couldn't open ghk.inc
	make: *** [NMDAeee.lo] Error 1

Looks like there is no ghk.inc in the mod dir...

	graham$ git clone https://github.com/Neurosim-lab/EEE_network.git
	graham$ cd EEE_network/mod/
	graham$ cp /usr/site/nrniv/local/mod/ghk.inc ./ghk.inc
	graham$ nrnivmodl

Now it seems to have worked fine.  
Will add ghk.inc to the git repo.

But first, I notice I need to merge Salvador's improvements from his
'simplify' branch to the Master... done.

Starting over.

	graham$ rm -rf EEE_network/
	graham$ git clone https://github.com/Neurosim-lab/EEE_network.git
	graham$ cd EEE_network/mod/
	graham$ nrnivmodl

Still has the ghk.inc problem.  Will add to repo.

	graham$ cd ~
	graham$ rm -rf EEE_network/
	graham$ git clone https://github.com/Neurosim-lab/EEE_network.git
	graham$ cd EEE_network/mod/
	graham$ cp /usr/site/nrniv/local/mod/ghk.inc ./ghk.inc
	graham$ git status
	On branch master
	Your branch is up to date with 'origin/master'.

	Untracked files:
	  (use "git add <file>..." to include in what will be committed)

		ghk.inc

	nothing added to commit but untracked files present (use "git add" to track)
	graham$ git add ghk.inc 
	graham$ git status
	On branch master
	Your branch is up to date with 'origin/master'.

	Changes to be committed:
	  (use "git reset HEAD <file>..." to unstage)

		new file:   ghk.inc

	graham$ git commit -m "Added ghk.inc which is needed by NMDAeee.mod"
	[master 5fb1177] Added ghk.inc which is needed by NMDAeee.mod
	 1 file changed, 35 insertions(+)
	 create mode 100644 mod/ghk.inc
	graham$ git push
	Counting objects: 4, done.
	Delta compression using up to 8 threads.
	Compressing objects: 100% (4/4), done.
	Writing objects: 100% (4/4), 742 bytes | 742.00 KiB/s, done.
	Total 4 (delta 2), reused 0 (delta 0)
	remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
	To https://github.com/Neurosim-lab/EEE_network.git
	   700cd24..5fb1177  master -> master

So everything should work now.  Trying it out.

	graham$ cd ~
	graham$ rm -rf EEE_network/
	graham$ git clone https://github.com/Neurosim-lab/EEE_network.git
	graham$ cd EEE_network/mod/
	graham$ nrnivmodl

Works perfectly now.  

Need to symlink mod/x86_64 into eee_network

	graham$ ln -s /Users/graham/EEE_network/mod/x86_64 /Users/graham/EEE_network/eee_network/x86_64

Now hopefully everything works.

*** Running EEE network sim

To debug in Netpyne, run files in the following order:

1) netParams.py 
2) batch_init.py (just init.py in this case) 
3) batch.py

Trying to run netParams.py:
	graham$ python netParams.py 
	Traceback (most recent call last):
	  File "netParams.py", line 1, in <module>
	    from netpyne import specs
	ModuleNotFoundError: No module named 'netpyne'

Need to install Netpyne (development version to immediately get fixes):
http://www.netpyne.org/install.html#install-via-pip-development-version

	1. git clone https://github.com/Neurosim-lab/netpyne.git
	2. cd netpyne
	3. git checkout development
	4. pip install -e .

	pip will add a symlink in the default python packages folder to the cloned netpyne folder (so you don’t need to modify PYTHONPATH). If new changes are available just need to pull from cloned netpyne repo.

Commands:
	graham$ cd ~/Applications/
	graham$ git clone https://github.com/Neurosim-lab/netpyne.git
	graham$ cd netpyne/
	graham$ git checkout development
	graham$ pip install -e .

Everything seems to have worked.

Trying to run netParams again:
	
	graham$ cd ~/EEE_network/eee_network/
	graham$ python netParams.py
	Note: NeuroML import failed; import/export functions for NeuroML will not be available. 
	  To install the pyNeuroML & libNeuroML Python packages visit: https://www.neuroml.org/getneuroml
	Traceback (most recent call last):
	  File "netParams.py", line 95, in <module>
	    for secName,sec in netParams.cellParams['PT5_1']['secs'].iteritems():         
	TypeError: 'Dict' object is not callable

Seems to be a problem with Python 2 --> 3
https://github.com/mgymrek/itable/issues/9
https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems

I changed two `iteritems` in netParams to `items` and now it works.

So netParams works now.  Now to run init.py

	graham$ python init.py

Something's not quite right:

	Plotting raster...
	There was an exception in plotRaster(): 
	 "['tags'] not found in axis" 
	(<class 'KeyError'>, KeyError("['tags'] not found in axis"), <traceback object at 0x12223ea88>)

Also, traces plot appeared in eee_network dir, but it's blank.

Also, there are too few cells...

Line 130 in cfg.py was:
cfg.singleCellPops = True

Changed it to False and trying again.

Running netParams works fine.  
When I run init, it seems like there are no connections and no traces recorded:

	Creating network of 5 cell populations on 1 hosts...
	  Number of cells on node 0: 1500 
	  Done; cell creation time = 4.66 s.
	Making connections...
	  Number of connections on node 0: 0 
	  Done; cell connection time = 0.00 s.
	  Number of stims on node 0: 0 
	  Done; cell stims creation time = 0.00 s.
	Recording 0 traces of 0 types on node 0

Still getting raster error and blank traces plot.


Changing from hpc_slurm to mpi in batch.py:
#setRunCfg(b, type='hpc_slurm')
setRunCfg(b, type='mpi')

Trying to run batch.py

Getting an error:
	graham$ python batch.py
	Traceback (most recent call last):
	  File "batch.py", line 8, in <module>
	    from netpyne.batch import Batch, specs
	ImportError: cannot import name 'specs' from 'netpyne.batch' (/Users/graham/Applications/netpyne/netpyne/batch/__init__.py)

It seems like I should change importing specs from netpyne.batch to just from netpyne...

Changing batch.py and trying again.

Getting a new error:
	FileNotFoundError: [Errno 2] No such file or directory: 'batch_data/stim_batch6/stim_batch6_batch.json'

I think the dir must already exist...  Changing batch.py to remove need for
extra dir.

New error:
	Error: invalid runCfg 'type' selected; valid types are 'mpi_bulletin', 'mpi_direct', 'hpc_slurm', 'hpc_torque'

Will have to look into this.  Asked Salva:

	joe [9:59 AM]
	Hey Salva, it seems Netpyne used to accept `mpi` as a runCfg option, but now Netpyne requires `mpi_direct` or `mpi_bulletin`…

	Untitled 
	Error: invalid runCfg 'type' selected; valid types are 'mpi_bulletin', 'mpi_direct', 'hpc_slurm', 'hpc_torque'
	Would you mind explaining the difference between `direct` and `bulletin`?
	i.e. which should I be using?

	salvadord [10:03 AM]
	mpi_bulletin - uses NEURON’s mpi bulletin board (master slave) to run the batch sim — there is a master node that sends jobs (each sim) to the slave nodes

	joe [10:05 AM]
	And what does `mpi_direct` do?

	salvadord [10:07 AM]
	mpi_direct - runs each of the batch jobs directly using mpi by calling mpirun via Popen (a pipe) — can specify the number of cores of each mpi job … eg say you have a machine with 16 cores, you could run 4 of the batch jobs on 4 cores each simultaneously
	with mpi_bulleting, each job is always on a single core
	*mpi_bulletin

Okay, so switching to `mpi_bulletin` (seems less complicated):
Changing all `mpi` in batch.py to `mpi_bulletin`

Now batch.py seems to run, but Sergio's default batch was huge: four 
variables each with multiple values.  Will need to set up a smaller batch.  

For now, will look into why there are no connections and no traces.

Running single sim:

graham$ cd ~/EEE_network/eee_network/
graham$ ./runsim

It runs, but no connections or output traces.  Looking into it...

The lack of connectivity is because the connectivity stuff has been commented out. Once we have it working and are getting output we can worry about connectivity.

Having a hard time figuring out the problem with lack of output figures.
I tried adding a soma recording to the cfg file, and when I look in the output json file, the soma trace data is there, but the trace plot output is blank...

Reducing sim time to 50 ms to speed things up.  Commenting out basal trace recording in cfg.

Same thing.  No output traces.

The code is really convoluted.  I'm beginning to think it would be better to start from our cell models and build up network sims from scratch...

Will push my stuff to the git repo now.  Creating a new branch: joes_branch

Cloning, switching to joes_branch, swapping in my changes, then pushing.


* 2019-01-11 -- EEE Network Meeting

In progress
-----------
Summarize current network model
Prepare for discussion with EEE team
Meeting 12pm Eastern to discuss network

** Steps to run network sim

cd ~
git clone https://github.com/Neurosim-lab/EEE_network.git
cd EEE_network/
git checkout joes_branch
cd mod
nrnivmodl
ln -s ~/EEE_network/mod/x86_64 ~/EEE_network/x86_64
cd ../eee_network
./runsim

** EEE Network Sim Meeting -- 2018-01-11
https://docs.google.com/document/d/1jKOPmc2PkjyJme_dgMKip7mLxlXXPuehVY4q-qeBWZs/edit

Google Hangout URL: https://hangouts.google.com/call/UFV-belsSHz1VJv5J4ozAAEE 

Today’s agenda

How to start developing the network model
List of tasks
Division of tasks
	
Discussion

Current state
Disorganized

Network sim development plan
  Scrap existing model
  Two populations: Netpyne tutorial 5
  How many populations? Two
  Where data?  Connectivity?
    Layer 5 IT cells connectivity
    PV cells from M1 model
  Background inputs
  Inputs to both pops
  Want baseline oscillations
How to divide E cells
  Sergio had multiple -- good way to start
  Can force plateaus on subset
How to distribute synapses on neurons
  Bill: 500 inputs 
  One basal has convergence
  Look into clustering
  Strong convergence onto dend A then B
  Other dend possible synchronicity source
Number of cells: ~5000
Trello for task management
Goal of network
  Use existing cell models
  Plug into network
  Look for ensembles
  Preferably emergent
  Synchrony in embedded ensembles
  Activated → Synced
Tasks to be accomplished
  Joe gets framework in place
  Then we divvy up tasks


* 2019-01-15 -- Setting up new network model, EEE Meeting

In progress
-----------
Netpyne Tutorial 5 as basis for network model
Get new model framework into Github
List of synaptic clustering articles
Meeting 11am Eastern - prepare agenda

** Netpyne Tutorial 5

http://netpyne.org/tutorial.html#position-and-distance-based-connectivity-tutorial-5

Downloaded tut5.py and it runs, though I needed to uncomment the following line to see figures:

	import pylab; pylab.show()  # this line is only necessary in certain systems where figures appear empty

The figures should have been saved as well, but never appeared.  Will look into this later.

Downloaded runsim in order to parallelize sims:
	
	#!/bin/bash
	mpiexec -n $1 nrniv -python -mpi $2  # Run the model

Changed permissions on runsim so I can execute:

	graham$ chmod +x runsim

Now splitting tut5.py into three files: 
	
	netParams.py
	cfg.py
	init.py

Changing runsim to call init.py:

	#!/bin/bash
	# Runs simulation, including MPI.

	numprocesses=$1; if [ -z $numprocesses ]; then numprocesses=4; fi # Number of processes to use
	shift # Eliminate first argument

	mpiexec -np $numprocesses nrniv -python -mpi init.py $@  # Run the model

Copying init.py from earlier network sim:

	"""
	init.py

	Usage:
	    python init.py # Run simulation, optionally plot a raster

	MPI usage:
	    mpiexec -n 4 nrniv -python -mpi init.py

	Contributors: salvadordura@gmail.com
	"""

	#import matplotlib; matplotlib.use('Agg')  # to avoid graphics error in servers
	from netpyne import sim

	simConfig, netParams = sim.readCmdLineArgs()
	#sim.createSimulateAnalyze()

	sim.initialize(
	    simConfig = simConfig,    
	    netParams = netParams)        # create network object and set cfg and net params
	sim.net.createPops()              # instantiate network populations
	sim.net.createCells()             # instantiate network cells based on defined populations
	sim.net.connectCells()            # create connections between cells based on params
	sim.net.addStims()                # add network stimulation
	sim.setupRecording()              # setup variables to record for each cell (spikes, V traces, etc)
	sim.runSim()                      # run parallel Neuron simulation  
	sim.gatherData()                  # gather spiking data and cell info from each node
	sim.saveData()                    # save params, cell info and sim output to file (pickle,mat,txt,etc)
	sim.analysis.plotData()           # plot spike raster etc


Now to break tut5.py into netParams and cfg and try to run.

	graham$ ./runsim 1
	numprocs=1
	NEURON -- VERSION 7.6.4 master (50728e66) 2018-12-14
	Duke, Yale, and the BlueBrain Project -- Copyright 1984-2018
	See http://neuron.yale.edu/neuron/credits

	Note: NeuroML import failed; import/export functions for NeuroML will not be available. 
	  To install the pyNeuroML & libNeuroML Python packages visit: https://www.neuroml.org/getneuroml

	Reading command line arguments using syntax: python file.py [simConfig=filepath] [netParams=filepath]

	Warning: Could not load cfg from command line path or from default cfg.py

	Creating network of 6 cell populations on 1 hosts...
	  Number of cells on node 0: 300 
	  Done; cell creation time = 0.03 s.
	Making connections...
	  Number of connections on node 0: 6796 
	  Done; cell connection time = 0.67 s.
	Adding stims...
	  Number of stims on node 0: 300 
	  Done; cell stims creation time = 0.03 s.

	Running simulation for 1000.0 ms...
	  Done; run time = 3.08 s; real-time ratio: 0.32.

	Gathering data...
	  Done; gather time = 0.17 s.

	Analyzing...
	  Cells: 300
	  Connections: 7096 (23.65 per cell)
	  Spikes: 4879 (16.26 Hz)
	  Simulated time: 1.0 s; 1 workers
	  Run time: 3.08 s
	  Done; saving time = 0.01 s.
	  Done; plotting time = 0.00 s

	Total time = 4.00 s
	>>> 

No figures, and it doesn't seem to have worked:

	Warning: Could not load cfg from command line path or from default cfg.py

It seems the problem may be that in tut5.py we named the config object simConfig instead of cfg...

	simConfig = specs.SimConfig()

Will change all config file lines to:
	
	cfg = specs.SimConfig()

Commenting out line that runs sim in cfg.py

Renaming simConfig to cfg in init.py

Trying to run sim.

	graham$ ./runsim 1

Sim ran successfully, figures appeared but weren't saved.  Off to a good start.

Now that the sim is functional, I'll push to Github.

How I was taught to develop code:
	
	Step 1: make it run.
	Step 2: make it right.
	Step 3: make it fast.

Now to work on Step 2 while ensuring Step 1 continues to work.

Next steps:

Use our cell models
Modify population parameters 

** Updating the README

	# EEE_network

	## Steps to run the network simulation:

	1. cd ~
	2. git clone https://github.com/Neurosim-lab/EEE_network.git
	3. cd EEE_network/
	4. git checkout joes_branch
	5. cd mod
	6. nrnivmodl
	7. cd ../eee_net
	8. ln -s "../mod/x86_64" x86_64
	9. ./runsim

Tested these steps and they work from any location (not just home).

** Meeting agenda / notes

https://docs.google.com/document/d/1kZGWeilbLhc9Lv9ly82xLqsqFRsdW6iAsQdeytzcUXo/edit

*** Upcoming deadlines:

IMAG:		Feb 1, 11:59 EST
https://msmmeeting.nibib.nih.gov/instructions-for-submitting-materials

CNS: 		March 4, 11pm Pacific time
https://www.cnsorg.org/cns-2019-abstract-submission

BRAIN:	March 11, 5pm EST
http://www.cvent.com/events/5th-annual-brain-initiative-investigators-meeting/custom-117-de9c0d8f934b46eb8d80b55bcfbfe96a.aspx

SfN: 		May 2, 5pm EDT
https://www.sfn.org/Meetings/Neuroscience-2019/Dates-and-Deadlines

*** Network Meeting summary

2 populations (E and I)
E from Penny’s single cell model (simplified)
I from PV cells in Salva’s M1 model
5000 cells, 500 inputs per cell
Background inputs to both pops → oscillations
First force plateaus and explore sims
Work towards emergent plateaus / ensembles

Framework for network sims is in joes_branch in EEE_network/eee_net
https://github.com/Neurosim-lab/EEE_network/tree/joes_branch/eee_net

Currently it’s just Netpyne Tutorial 5 broken down into the files needed for organizing a larger simulation, but it runs
Next steps: swapping in our cell models, modifying pop parameters, etc.


** Synaptic clustering articles

Need to read these and pull relevant info.

Synaptic clustering articles:

Single excitatory axons form clustered synapses onto CA1 pyramidal cell dendrites
https://www.nature.com/articles/s41593-018-0084-6
“Here we show that single presynaptic axons form multiple, spatially clustered inputs onto the distal, but not proximal, dendrites of CA1 pyramidal neurons.”

Synaptic clustering by dendritic signalling mechanisms
https://www.sciencedirect.com/science/article/abs/pii/S095943880800086X
“Dendrites are endowed with mechanisms of nonlinear summation of synaptic inputs leading to regenerative dendritic events including local sodium, NMDA and calcium spikes. The generation of these events requires distinct spatio-temporal activation patterns of synaptic inputs. We hypothesise that the recent findings on dendritic spikes and local synaptic plasticity rules suggest clustering of common inputs along a subregion of a dendritic branch.”

Synaptic clustering within dendrites: An emerging theory of memory formation
https://www.sciencedirect.com/science/article/pii/S0301008214001373
“The emerging picture suggests that clusters of functionally related synapses may serve as key computational and memory storage units in the brain. We discuss both experimental evidence and theoretical models that support this hypothesis and explore its advantages for neuronal function.”

Synaptic clustering during development and learning: the why, when, and how
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3364493/
“Previous modeling and experimental studies have predicted that this specificity could entail a subcellular organization whereby synapses that carry similar information are clustered together on local stretches of dendrite. Recent imaging studies have now, for the first time, demonstrated synaptic clustering during development and learning in different neuronal circuits.”

Clusters of synaptic inputs on dendrites of layer 5 pyramidal cells in mouse visual cortex
https://elifesciences.org/articles/09222
“We mapped the spatial organization of glutamatergic synapses between layer 5 pyramidal cells by combining optogenetics and 2-photon calcium imaging in mouse neocortical slices. To mathematically characterize the organization of inputs we developed an approach based on combinatorial analysis of the likelihoods of specific synapse arrangements. We found that the synapses of intralaminar inputs form clusters on the basal dendrites of layer 5 pyramidal cells. These clusters contain 4 to 14 synapses within ≤30 µm of dendrite.”


* 2019-01-17 -- Setting up EEE populations

In progress
-----------
Setting up network model
Get our cell models in
Adjust population parameters
Set initial connectivity to Sergio's settings?

** Adjusting population properties

Sergio's original code:

	# add excitatory populations
	excPopLabels = ['PT5_1', 'PT5_2', 'PT5_3', 'PT5_4'] 
	for k,label in enumerate(excPopLabels):
	    netParams.popParams[label]  = {'cellModel': 'HH_reduced', 'cellType': label,  'xRange': columnA, 'ynormRange': layer['5'], 'numCells': numcellsPT5} 

	# add inhibitory population
	netParams.popParams['PV5']  = {'cellModel': 'HH_simple',  'cellType': 'PV','xRange': columnA, 'ynormRange': layer['5'], 'numCells': numcellsPV5} 

The layer['5'] comes from:
	
	# layer boundaries
	layer = {'5': [0.2,0.623], 'long': [0.7,1.0]} # yRange in column

Code from tutorial:

	netParams.popParams['E2'] = {'cellType': 'E', 'numCells': 50, 'yRange': [100,300], 'cellModel': 'HH'}
	netParams.popParams['I2'] = {'cellType': 'I', 'numCells': 50, 'yRange': [100,300], 'cellModel': 'HH'}
	netParams.popParams['E4'] = {'cellType': 'E', 'numCells': 50, 'yRange': [300,600], 'cellModel': 'HH'}
	netParams.popParams['I4'] = {'cellType': 'I', 'numCells': 50, 'yRange': [300,600], 'cellModel': 'HH'}
	netParams.popParams['E5'] = {'cellType': 'E', 'numCells': 50, 'ynormRange': [0.6,1.0], 'cellModel': 'HH'}
	netParams.popParams['I5'] = {'cellType': 'I', 'numCells': 50, 'ynormRange': [0.6,1.0], 'cellModel': 'HH'}

New code:

	## Population parameters
	netParams.popParams['PT5_1'] = {'cellType': 'E', 'numCells': 200, 'ynormRange': [0.2,0.623], 'cellModel': 'HH'}
	netParams.popParams['PT5_2'] = {'cellType': 'E', 'numCells': 200, 'ynormRange': [0.2,0.623], 'cellModel': 'HH'}
	netParams.popParams['PT5_3'] = {'cellType': 'E', 'numCells': 200, 'ynormRange': [0.2,0.623], 'cellModel': 'HH'}
	netParams.popParams['PT5_4'] = {'cellType': 'E', 'numCells': 200, 'ynormRange': [0.2,0.623], 'cellModel': 'HH'}
	netParams.popParams['PV5'] = {'cellType': 'I', 'numCells': 200, 'ynormRange': [0.2,0.623], 'cellModel': 'HH'}

Getting a strange NEURON error. Looking through netParams for any other necessary changes.

The I-->E pops need to be changed, from:

	netParams.connParams['I->E'] = {
	  'preConds': {'cellType': 'I'}, 'postConds': {'pop': ['E2','E4','E5']},       #  I -> E
	  
To:

	netParams.connParams['I->E'] = {
	  'preConds': {'cellType': 'I'}, 'postConds': {'pop': ['E']},       #  I -> E

Trying again.

Hmmm.  When I run it using once core, it seems to complete the sim, but stalls at the connectivity plot.  (There are 79621 connections, which probably would take awhile to plot...)

Reducing the number of cells and trying again.

Now it works and plots.  Trying it with multiple cores.

Still works.  Will add a variable to set the number of neurons.

Still works.  I have succesfully renamed the populations.

Now to use our cell models.  But first committing.


* 2019-01-18 -- Plugging PV5 model into network

In progress
-----------
Setting up network model
Get our cell models in
Set initial connectivity to Sergio's settings?

** Get our cell models in

Using info from here:
http://netpyne.org/advanced.html#importing-cells

*** Trying to swap in the PV5 cell model first

Sergio's code (from netParams.py):

	# Find path to cells directory
	cellpath = '../cells'
	eeeS_path = os.path.join(cellpath, 'eeeS.py')
	PV_path   = os.path.join(cellpath, 'FS3.hoc')

	# Import and modify PT5 cell
	cellRule = netParams.importCellParams(label='PT5_1', conds={'cellType': 'PT5_1', 'cellModel': 'HH_reduced'}, fileName=eeeS_path, cellName='MakeCell')

	# Import PV5 cell
	cellRule = netParams.importCellParams(label='PV5', conds={'cellType':'PV', 'cellModel':'HH_simple'}, fileName=PV_path, cellName='FScell1', cellInstance = True)

First changing all cellTypes from tutorial's E and I to PT5 and PV

Starting with importing the PV5 cell.

	## Import PV5 cell
	cellRule = netParams.importCellParams(label='PV5', conds={'cellType':'PV'}, fileName=PV_path, cellName='FScell1', cellInstance=True)
	netParams.cellParams['PVrule'] = cellRule

And attempting to run sim.

Getting an error:

	graham-mac:eee_net graham$ ipython -i netParams.py
	Python 3.7.1 (default, Dec 14 2018, 13:28:58) 
	Type 'copyright', 'credits' or 'license' for more information
	IPython 7.2.0 -- An enhanced Interactive Python. Type '?' for help.
	NEURON: syntax error
	 in FS3.hoc near line 37
	      insert Nafx
	                ^
	        xopen("FS3.hoc")
	      execute1("{xopen("FS...")
	    load_file("../cells/F...")
	Segmentation fault: 11

Looking into it.

I think I need to symlink the x86_64 dir into the dir eee_net...

That worked.  Now ./runsim works and generates figures, but PT5 trace figures didn't show up (PV5 trace figure did).  Looking into.

I changed the cellType of all PT5 pops from PT5_# to just PT5.  Switching back and seeing if trace figures work again.

Still none.

Ahh, I had commented out the code setting up the PT cells because I wasn't ready.  Uncommenting and checking.

Changed E to PT5:

	## Cell property rules
	cellRule = {'conds': {'cellType': 'PT5'},  'secs': {}}  # cell rule dict
	cellRule['secs']['soma'] = {'geom': {}, 'mechs': {}}                              # soma params dict
	cellRule['secs']['soma']['geom'] = {'diam': 15, 'L': 14, 'Ra': 120.0}                   # soma geometry
	cellRule['secs']['soma']['mechs']['hh'] = {'gnabar': 0.13, 'gkbar': 0.036, 'gl': 0.003, 'el': -70}      # soma hh mechanism
	netParams.cellParams['Erule'] = cellRule  

Now everything works fine.  Will commit and then insert eeeS cell model.


* 2019-01-21 -- 

In progress
-----------
Setting up network model
Get our cell models in
Set initial connectivity to Sergio's settings?

** Chats 

don [9:18 AM]
joe, how is the code coming along. please let me know if there is anything i may help with

joe [9:30 AM]
I’m just sitting down at it now.  Right now it’s just Netpyne tutorial 5 broken into separate files.  I’m about to start setting it up how we discussed in the meeting.
But if you could try running it now, that’d be great, and then you can help plug in the cell models, set the parameters, etc. with me.
It’s in my branch right now: https://github.com/Neurosim-lab/EEE_network/tree/joes_branch
GitHub
Neurosim-lab/EEE_network
Contribute to Neurosim-lab/EEE_network development by creating an account on GitHub.
The README should explain how to run it.

don [9:37 AM]
ok … doing now

don [9:45 AM]
looks like i just pulled the same as before
your branch is selected and then i clone
i ran init.py

joe [9:46 AM]
After you clone, you have to `git checkout joes_branch`

don [9:46 AM]
oh, sorry!

joe [9:47 AM]
No worries.  git is confusing.

joe [10:00 AM]
So I left the old stuff in eee_network (so we can mine it for useful code) and I am now developing eee_net

don [10:00 AM]
ran. seems to run fine. gui windows appeared but i didn
’t wait for content to appear
need to run but will be back at it in about 1 hour

joe [10:01 AM]
:+1:

don [12:48 PM]
sorry, was pulled away longer than expected
did a git fetch when i returned … guess you hadn’t updated repo?

don [12:54 PM]
running and displaying fine
don’t want to redo that which you’ve already done so please assign me a task and i will do

joe [2:25 PM]
I’m trying to get all the old parameters and settings into the new model.  Probably won’t be done until sometime tomorrow.  Might as well wait until then to get you going so we don’t overlap.

don [3:07 PM]
Ok

don [8:56 AM]
how’s it going joe?

joe [9:18 AM]
Slowly, but it’s going.  I got the EEE populations into the model yesterday.  This morning I’m working on getting our cell models in.
If you wanted to update your repo and make sure it still runs on your machine, that would be helpful.

don [9:30 AM]
already did and does ;)

joe [9:33 AM]
Sweet, thanks.  I’ll let you know when I get the cells in.

don [9:48 AM]
are the cells the ones in EEE_singlecell_simplified?

joe [9:52 AM]
We’ve got them in the repo as: `EEE_network/cells/eeeS.py` and `EEE_network/cells/FS3.hoc`
But actually, there is something you could do that wouldn’t overlap!
I’ve been meaning to re-compare `eeeS.py` with Penny’s detailed model again (it’s been awhile and she probably made some changes).
We want to use all the same mod files, all the same parameter values, etc.

joe [11:45 AM]
Got the PV model cell inserted and working.  After lunch I’ll get the eeeS model plugged in.

don [6:28 AM]
Where can I find Penny’s original detailed model? Maybe EEE_singlecell_simplified? But says “simplified” not detailed model.

joe [3:08 PM]
Hmmm.  I’ll have to look for it.

joe [3:12 PM]
Hey Penny, Don is going to make sure that our simplified model uses all the same mod files and parameter values as your detailed model.  Is there some way we can access your current detailed model?

penny [5:47 PM]
Hello, here it is: https://github.com/super-penguin/EEE_Detailed_Cell. We are using the same mod files :-)
GitHub
super-penguin/EEE_Detailed_Cell
A detailed model of prefrontal L5 pyramidal neuron --- for EEE project - super-penguin/EEE_Detailed_Cell
But some of the parameters are a little bit different. I made changes to the simplified model from the network github repo before, but didn’t push it. I will push it tonight

don [6:15 PM]
great! thank you penny

penny [7:27 PM]
:+1:

joe [7:47 PM]
Thanks Penny!

penny [12:39 AM]
Hmmm, if I add a pull request, the new changes will be merged into the neurosim-lab/EEE_network master branch without permission. Is this how its set up?
I just add a pull request, let me know if something is not right. Hope I didn’t mess up the repo

joe [11:10 AM]
Thanks, Penny! I don’t have a lot of experience with Git, but it looks like your pull request is great.  I’m just about to try inserting eeeS into the network model.  Once I get that working I’ll figure out how to merge my changes into the master branch.  :sweat_smile:

penny [11:11 AM]
Great! Thanks. I am pretty new to group work on github too:joy:


** Updating eeeS

I accepted Penny's pull request in the master branch, so the updated eeeS model is there.

I'm working in joes_branch though, so I need to get the latest model into my branch also.

I think I'll just download it from the master branch and copy and paste it into my local repo of joes_branch.

Cloning repo into temp, copying eeeS.py over to my repo of joes_branch.

That worked.  

	graham-mac:EEE_network graham$ git status
	On branch joes_branch
	Your branch is up to date with 'origin/joes_branch'.

	Changes not staged for commit:
	  (use "git add <file>..." to update what will be committed)
	  (use "git checkout -- <file>..." to discard changes in working directory)

		modified:   cells/eeeS.py
		modified:   nb_graham.org


Committing now.

** Swapping eeeS into network model

Here's how we now import the PV5 cell model:

	## Import PV5 cell
	cellRule = netParams.importCellParams(label='PV5', conds={'cellType':'PV'}, fileName=PV_path, cellName='FScell1', cellInstance=True)
	netParams.cellParams['PVrule'] = cellRule

Here's how we used to import the eeeS model:

	# Import and modify PT5 cell
	cellRule = netParams.importCellParams(label='PT5_1', conds={'cellType': 'PT5_1', 'cellModel': 'HH_reduced'}, fileName=eeeS_path, cellName='MakeCell')

But then to get separate pops, we used to copy the first cell rule:

	# make copy of cell rule for the other 3 pops
	# note: we are creating 1 cell type per pop because they could potentially have different Gfluct params           
	for k,label in enumerate(excPopLabels[1:]):    
	        cellRule = copy.deepcopy(netParams.cellParams['PT5_1'].todict())
	        cellRule['conds']['cellType'] = [label]
	        netParams.cellParams[label] = cellRule

Where

	excPopLabels = ['PT5_1', 'PT5_2', 'PT5_3', 'PT5_4']

I'm not quite sure what `cellInstance=True` does...  Can't find it anywhere in the Netpyne documentation.  I'll ask Salva.


** Asking Salva for help

joe [11:43 AM]
Hey Salva, in our old network code, when we did a `cellRule = netParams.importCellParams` we included the option `cellInstance=True`, but that never appears in the tutorial code, and I can’t find it in the Netpyne documentation.  Do you know if that does anything?

salvadord [11:45 AM]
yes it does … unfotunately a lot of stuff not documented
cellInstance = True means you are extracting the cell parameters from a cell that has been instantiated from a template (hoc template or python class) instead of fromthe template itself (which is the default
i.e. in the file you are importing from there’ll be something like `cell = PTCell()`

joe [11:48 AM]
Pretty sure I understand the distinction, just not sure what difference it would make.  I.e., is there a reason we need it for our eee network sims?

joe [12:01 PM]
One more question: in the old code, we used `importCellParams` once for PT5_1, and then deepcopied the cellRule three times for PT5_2, etc.  To me, this is less intuitive than just running `importCellParams` four times…  Does the copying offer some advantage I don’t see?

salvadord [12:03 PM]
no difference after being imported — just needed for some cases where eg. need to instantiate cell first because need to call cell class methdos that set some cell params
needed for eee — not sure, I can check
copying advantage - faster, since importing internally requires actually creating the cell in Neuron and using a bunch of Neuron funcs to extract all the params
ideally all the cell params would remain the same, so could just create multiple populations from the same cellParams rule — however due to the setup of the artif noise input to cell, I think needed different cellParams entries

joe [12:06 PM]
Great, thanks Salva!

** Inserting eeeS cell model

New code:

	## Import eeeS cell (PT5)
	cellRule = netParams.importCellParams(label='PT5_1', conds={'cellType':'PT5_1'}, fileName=eeeS_path, cellName='MakeCell', cellInstance=True)
	netParams.cellParams['PT5_1'] = cellRule

	## Then copy the cellRule for the other pops (faster than importing again)
	## Note: we are creating 1 cell type per pop because they could potentially have different noise and connectivity params           
	for label in ['PT5_2', 'PT5_3', 'PT5_4']:    
	    cellRule = copy.deepcopy(netParams.cellParams['PT5_1'].todict())
	    cellRule['conds']['cellType'] = [label]
	    netParams.cellParams[label] = cellRule

And trying it out.  It ran, but not all figures appeared.  Need to change recording options to match cellTypes.

Actually, it already matched cellTypes.  The problem is that our eeeS cells have more than one soma compartment, requiring the following to record somas from both PV5 cells and PT5 (eeeS):

	cfg.recordTraces = {'V_soma':{'sec':'soma','loc':0.5,'var':'v'}}  # Dict with traces to record
	cfg.recordTraces['V_soma_0'] = {'sec':'soma_0','loc':0.5,'var':'v'}

The first line gets the soma from the PV cells, the second line gets a soma from the PT cells.  Problem is, neither has the other soma section, so trace-plotting gets hinky.

Easiest thing to do right now is probably compress the soma of eeeS into one compartment.  This will require figuring out how to keep the same surface area / volume, reconnecting all other branches to single soma, and testing before and after change to ensure they're the same.

About to go to lunch, so I'll see if Penny and Don can handle this.

** Chat with Penny and Don

joe [12:41 PM]
Hey Penny and Don, I’m still working on getting the network up and running, but there is something you guys could do in the meantime, if you have time.
I’m having problems with figures.  PV cells have single soma compartment while eeeS cells have several.  That means I have to record two traces to see soma (`soma` in PV and `soma_0` or `soma_1` etc. in eeeS).  Since the other cell type doesn’t have that section, the figures break.
I think the easiest fix would be just to collapse the several soma compartments in eeeS into a single one.
This would require reconnecting branches to the new single soma and matching surface area/volume between multiple and new single cylinder.
Then we’d probably want to run inputs into old multi-soma and new single-soma to ensure they behave the same.
I’m about to head to lunch, but I’ll be back later.

don [1:41 PM]
i’m looking though newly fetched EEE_network … not seeing new stuff. maybe i’m looking in wrong place?

joe [2:04 PM]
I’m working in `joes_branch` in the `eee_net` directory.  The `eee_network` directory is the old stuff I’m keeping around until we get all useful code out of it.

don [2:05 PM]
makes sense

penny [2:11 PM]
Got it. Will look into it soon :slightly_smiling_face:


** Using cellType different from pop name

Was having to do a lot of work to connect pops.  Instead of having each pop having a cellType set to its name, all PT5 pops now have cellType PT5.

Now I can wire individually to a pop or collectively to a cellType.

e.g. conds: {'pop': PT5_1} or conds: {'cellType': PT5}

And running.  Looks good except background seems to have zero connectivity.

Problem was I was using old cellTypes in the bkg setting.

Changed from this:

	netParams.stimTargetParams['bkg->all'] = {'source': 'bkg', 'conds': {'cellType': ['PV','PT5_1','PT5_2','PT5_3','PT5_4']}, 'weight': 0.01, 'delay': 'max(1, normal(5,2))', 'synMech': 'exc'}

To this:

	netParams.stimTargetParams['bkg->all'] = {'source': 'bkg', 'conds': {'cellType': ['PV5','PT5']}, 'weight': 0.01, 'delay': 'max(1, normal(5,2))', 'synMech': 'exc'}

Now it works and everything looks good.

Committing.

** Replacing master branch with joes_branch

Now that my branch is working, I want to actually replace everything in the master branch with my own.

https://stackoverflow.com/questions/2862590/how-to-replace-master-branch-in-git-entirely-from-another-branch

Cleaned up some extraneous comments.  Committing now and then will attempt the branch grafting.

Commands to graft:

	git checkout joes_branch
	git merge -s ours master
	git checkout master
	git merge joes_branch

Doesn't seem to be working.  

	graham$ git merge -s ours master
	Already up to date.

I'm going to do it quick and dirty.  First, I'll make a branch copy of master named old_master.  

	graham-mac:EEE_network graham$ git checkout master
	Switched to branch 'master'
	Your branch is up to date with 'origin/master'.
	graham-mac:EEE_network graham$ git branch -m master old_master
	graham-mac:EEE_network graham$ git branch
	  joes_branch
	* old_master
	graham-mac:EEE_network graham$ git push
	fatal: The upstream branch of your current branch does not match
	the name of your current branch.  To push to the upstream branch
	on the remote, use

	    git push origin HEAD:master

	To push to the branch of the same name on the remote, use

	    git push origin old_master

	graham-mac:EEE_network graham$ git push origin old_master
	Total 0 (delta 0), reused 0 (delta 0)
	remote: 
	remote: Create a pull request for 'old_master' on GitHub by visiting:
	remote:      https://github.com/Neurosim-lab/EEE_network/pull/new/old_master
	remote: 
	To https://github.com/Neurosim-lab/EEE_network.git
	 * [new branch]      old_master -> old_master
	graham-mac:EEE_network graham$ 


Now to forcefully replace master with joes_branch

	graham-mac:EEE_network graham$ git checkout master
	error: Your local changes to the following files would be overwritten by checkout:
		nb_graham.org
	Please commit your changes or stash them before you switch branches.
	Aborting
	graham-mac:EEE_network graham$ 

Oops.  Need to commit the notebook changes first.










